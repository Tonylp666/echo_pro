{"ast":null,"code":"import { ref, reactive, computed, onMounted } from 'vue';\nimport { useRoute, useRouter } from 'vue-router';\nimport { ElMessage } from 'element-plus';\nimport { getTask, createTask, updateTask } from '@/api/task';\nimport { getCategories } from '@/api/category';\nexport default {\n  __name: 'edit',\n  setup(__props, {\n    expose: __expose\n  }) {\n    __expose();\n    const route = useRoute();\n    const router = useRouter();\n\n    // 是否为编辑模式\n    const isEdit = computed(() => !!route.params.id);\n\n    // 表单引用\n    const taskFormRef = ref(null);\n    const submitLoading = ref(false);\n\n    // 任务表单\n    const taskForm = reactive({\n      id: null,\n      taskName: '',\n      title: '',\n      articleCategoryId: null,\n      description: '',\n      prompt: '',\n      sourceData: '',\n      scheduleType: 'ONCE',\n      scheduleCron: ''\n    });\n\n    // 表单验证规则\n    const taskRules = {\n      taskName: [{\n        required: true,\n        message: '请输入任务名称',\n        trigger: 'blur'\n      }, {\n        min: 2,\n        max: 50,\n        message: '长度在 2 到 50 个字符',\n        trigger: 'blur'\n      }],\n      title: [{\n        required: true,\n        message: '请输入文章标题',\n        trigger: 'blur'\n      }, {\n        min: 2,\n        max: 100,\n        message: '长度在 2 到 100 个字符',\n        trigger: 'blur'\n      }],\n      articleCategoryId: [{\n        required: true,\n        message: '请选择文章分类',\n        trigger: 'change'\n      }],\n      prompt: [{\n        required: true,\n        message: '请输入提示词',\n        trigger: 'blur'\n      }],\n      scheduleType: [{\n        required: true,\n        message: '请选择调度类型',\n        trigger: 'change'\n      }],\n      scheduleCron: [{\n        required: true,\n        message: '请输入CRON表达式',\n        trigger: 'blur',\n        validator: (rule, value, callback) => {\n          if (taskForm.scheduleType === 'CRON' && !value) {\n            callback(new Error('请输入CRON表达式'));\n          } else {\n            callback();\n          }\n        }\n      }]\n    };\n\n    // 分类列表\n    const categoryList = ref([]);\n\n    // 获取任务详情\n    const getTaskDetail = async id => {\n      try {\n        const {\n          data\n        } = await getTask(id);\n        Object.assign(taskForm, data);\n      } catch (error) {\n        console.error('获取任务详情失败:', error);\n        ElMessage.error('获取任务详情失败');\n      }\n    };\n\n    // 获取分类列表\n    const getCategoryList = async () => {\n      try {\n        const {\n          data\n        } = await getCategories();\n        categoryList.value = data;\n      } catch (error) {\n        console.error('获取分类列表失败:', error);\n      }\n    };\n\n    // 设置CRON表达式\n    const setCron = cron => {\n      taskForm.scheduleCron = cron;\n    };\n\n    // 提交表单\n    const submitForm = () => {\n      taskFormRef.value.validate(async valid => {\n        if (valid) {\n          submitLoading.value = true;\n          try {\n            if (isEdit.value) {\n              await updateTask(taskForm.id, taskForm);\n              ElMessage.success('更新成功');\n            } else {\n              await createTask(taskForm);\n              ElMessage.success('创建成功');\n            }\n            goBack();\n          } catch (error) {\n            console.error('保存任务失败:', error);\n            ElMessage.error('保存任务失败');\n          } finally {\n            submitLoading.value = false;\n          }\n        } else {\n          return false;\n        }\n      });\n    };\n\n    // 重置表单\n    const resetForm = () => {\n      if (isEdit.value) {\n        getTaskDetail(route.params.id);\n      } else {\n        taskFormRef.value.resetFields();\n      }\n    };\n\n    // 返回列表页\n    const goBack = () => {\n      router.push('/task');\n    };\n    onMounted(() => {\n      getCategoryList();\n      if (isEdit.value) {\n        getTaskDetail(route.params.id);\n      }\n    });\n    const __returned__ = {\n      route,\n      router,\n      isEdit,\n      taskFormRef,\n      submitLoading,\n      taskForm,\n      taskRules,\n      categoryList,\n      getTaskDetail,\n      getCategoryList,\n      setCron,\n      submitForm,\n      resetForm,\n      goBack,\n      ref,\n      reactive,\n      computed,\n      onMounted,\n      get useRoute() {\n        return useRoute;\n      },\n      get useRouter() {\n        return useRouter;\n      },\n      get ElMessage() {\n        return ElMessage;\n      },\n      get getTask() {\n        return getTask;\n      },\n      get createTask() {\n        return createTask;\n      },\n      get updateTask() {\n        return updateTask;\n      },\n      get getCategories() {\n        return getCategories;\n      }\n    };\n    Object.defineProperty(__returned__, '__isScriptSetup', {\n      enumerable: false,\n      value: true\n    });\n    return __returned__;\n  }\n};","map":{"version":3,"names":["ref","reactive","computed","onMounted","useRoute","useRouter","ElMessage","getTask","createTask","updateTask","getCategories","route","router","isEdit","params","id","taskFormRef","submitLoading","taskForm","taskName","title","articleCategoryId","description","prompt","sourceData","scheduleType","scheduleCron","taskRules","required","message","trigger","min","max","validator","rule","value","callback","Error","categoryList","getTaskDetail","data","Object","assign","error","console","getCategoryList","setCron","cron","submitForm","validate","valid","success","goBack","resetForm","resetFields","push"],"sources":["/Users/ls/echo_pro/echo-blog-vue/src/views/task/edit.vue"],"sourcesContent":["<template>\n  <div class=\"task-edit-container app-container\">\n    <el-card class=\"box-card\">\n      <template #header>\n        <div class=\"card-header\">\n          <span>{{ isEdit ? '编辑任务' : '创建任务' }}</span>\n          <div class=\"right-menu\">\n            <el-button @click=\"goBack\">返回</el-button>\n          </div>\n        </div>\n      </template>\n      \n      <el-form\n        ref=\"taskFormRef\"\n        :model=\"taskForm\"\n        :rules=\"taskRules\"\n        label-width=\"100px\"\n        class=\"task-form\"\n      >\n        <el-form-item label=\"任务名称\" prop=\"taskName\">\n          <el-input v-model=\"taskForm.taskName\" placeholder=\"请输入任务名称\" />\n        </el-form-item>\n        \n        <el-form-item label=\"文章标题\" prop=\"title\">\n          <el-input v-model=\"taskForm.title\" placeholder=\"请输入文章标题\" />\n        </el-form-item>\n        \n        <el-form-item label=\"分类\" prop=\"articleCategoryId\">\n          <el-select v-model=\"taskForm.articleCategoryId\" placeholder=\"请选择文章分类\" style=\"width: 100%\">\n            <el-option\n              v-for=\"item in categoryList\"\n              :key=\"item.id\"\n              :label=\"item.name\"\n              :value=\"item.id\"\n            />\n          </el-select>\n        </el-form-item>\n        \n        <el-form-item label=\"任务描述\" prop=\"description\">\n          <el-input\n            v-model=\"taskForm.description\"\n            type=\"textarea\"\n            :rows=\"3\"\n            placeholder=\"请输入任务描述\"\n          />\n        </el-form-item>\n        \n        <el-form-item label=\"提示词\" prop=\"prompt\">\n          <el-input\n            v-model=\"taskForm.prompt\"\n            type=\"textarea\"\n            :rows=\"5\"\n            placeholder=\"请输入提示词\"\n          />\n        </el-form-item>\n        \n        <el-form-item label=\"源数据\" prop=\"sourceData\">\n          <el-input\n            v-model=\"taskForm.sourceData\"\n            type=\"textarea\"\n            :rows=\"5\"\n            placeholder=\"请输入源数据（可选）\"\n          />\n        </el-form-item>\n        \n        <el-form-item label=\"调度类型\" prop=\"scheduleType\">\n          <el-radio-group v-model=\"taskForm.scheduleType\">\n            <el-radio label=\"ONCE\">一次性</el-radio>\n            <el-radio label=\"CRON\">定时</el-radio>\n          </el-radio-group>\n        </el-form-item>\n        \n        <el-form-item\n          v-if=\"taskForm.scheduleType === 'CRON'\"\n          label=\"CRON表达式\"\n          prop=\"scheduleCron\"\n        >\n          <el-input v-model=\"taskForm.scheduleCron\" placeholder=\"请输入CRON表达式，例如: 0 0 12 * * ?\" />\n          <div class=\"cron-helper\">\n            <p>常用CRON表达式:</p>\n            <ul>\n              <li><el-button type=\"text\" @click=\"setCron('0 0 12 * * ?')\">每天中午12点执行</el-button></li>\n              <li><el-button type=\"text\" @click=\"setCron('0 0 0 * * ?')\">每天凌晨0点执行</el-button></li>\n              <li><el-button type=\"text\" @click=\"setCron('0 0 0 ? * MON')\">每周一凌晨0点执行</el-button></li>\n              <li><el-button type=\"text\" @click=\"setCron('0 0 0 1 * ?')\">每月1号凌晨0点执行</el-button></li>\n            </ul>\n          </div>\n        </el-form-item>\n        \n        <el-form-item>\n          <el-button type=\"primary\" :loading=\"submitLoading\" @click=\"submitForm\">保存</el-button>\n          <el-button @click=\"resetForm\">重置</el-button>\n        </el-form-item>\n      </el-form>\n    </el-card>\n  </div>\n</template>\n\n<script setup>\nimport { ref, reactive, computed, onMounted } from 'vue'\nimport { useRoute, useRouter } from 'vue-router'\nimport { ElMessage } from 'element-plus'\nimport { getTask, createTask, updateTask } from '@/api/task'\nimport { getCategories } from '@/api/category'\n\nconst route = useRoute()\nconst router = useRouter()\n\n// 是否为编辑模式\nconst isEdit = computed(() => !!route.params.id)\n\n// 表单引用\nconst taskFormRef = ref(null)\nconst submitLoading = ref(false)\n\n// 任务表单\nconst taskForm = reactive({\n  id: null,\n  taskName: '',\n  title: '',\n  articleCategoryId: null,\n  description: '',\n  prompt: '',\n  sourceData: '',\n  scheduleType: 'ONCE',\n  scheduleCron: ''\n})\n\n// 表单验证规则\nconst taskRules = {\n  taskName: [\n    { required: true, message: '请输入任务名称', trigger: 'blur' },\n    { min: 2, max: 50, message: '长度在 2 到 50 个字符', trigger: 'blur' }\n  ],\n  title: [\n    { required: true, message: '请输入文章标题', trigger: 'blur' },\n    { min: 2, max: 100, message: '长度在 2 到 100 个字符', trigger: 'blur' }\n  ],\n  articleCategoryId: [\n    { required: true, message: '请选择文章分类', trigger: 'change' }\n  ],\n  prompt: [\n    { required: true, message: '请输入提示词', trigger: 'blur' }\n  ],\n  scheduleType: [\n    { required: true, message: '请选择调度类型', trigger: 'change' }\n  ],\n  scheduleCron: [\n    { \n      required: true, \n      message: '请输入CRON表达式', \n      trigger: 'blur',\n      validator: (rule, value, callback) => {\n        if (taskForm.scheduleType === 'CRON' && !value) {\n          callback(new Error('请输入CRON表达式'))\n        } else {\n          callback()\n        }\n      }\n    }\n  ]\n}\n\n// 分类列表\nconst categoryList = ref([])\n\n// 获取任务详情\nconst getTaskDetail = async (id) => {\n  try {\n    const { data } = await getTask(id)\n    Object.assign(taskForm, data)\n  } catch (error) {\n    console.error('获取任务详情失败:', error)\n    ElMessage.error('获取任务详情失败')\n  }\n}\n\n// 获取分类列表\nconst getCategoryList = async () => {\n  try {\n    const { data } = await getCategories()\n    categoryList.value = data\n  } catch (error) {\n    console.error('获取分类列表失败:', error)\n  }\n}\n\n// 设置CRON表达式\nconst setCron = (cron) => {\n  taskForm.scheduleCron = cron\n}\n\n// 提交表单\nconst submitForm = () => {\n  taskFormRef.value.validate(async (valid) => {\n    if (valid) {\n      submitLoading.value = true\n      try {\n        if (isEdit.value) {\n          await updateTask(taskForm.id, taskForm)\n          ElMessage.success('更新成功')\n        } else {\n          await createTask(taskForm)\n          ElMessage.success('创建成功')\n        }\n        goBack()\n      } catch (error) {\n        console.error('保存任务失败:', error)\n        ElMessage.error('保存任务失败')\n      } finally {\n        submitLoading.value = false\n      }\n    } else {\n      return false\n    }\n  })\n}\n\n// 重置表单\nconst resetForm = () => {\n  if (isEdit.value) {\n    getTaskDetail(route.params.id)\n  } else {\n    taskFormRef.value.resetFields()\n  }\n}\n\n// 返回列表页\nconst goBack = () => {\n  router.push('/task')\n}\n\nonMounted(() => {\n  getCategoryList()\n  \n  if (isEdit.value) {\n    getTaskDetail(route.params.id)\n  }\n})\n</script>\n\n<style lang=\"scss\" scoped>\n.task-edit-container {\n  .task-form {\n    max-width: 800px;\n  }\n  \n  .cron-helper {\n    margin-top: 10px;\n    font-size: 14px;\n    color: #606266;\n    \n    p {\n      margin: 5px 0;\n    }\n    \n    ul {\n      margin: 5px 0;\n      padding-left: 20px;\n    }\n  }\n}\n</style> "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}