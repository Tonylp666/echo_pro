{"ast":null,"code":"import axios from 'axios';\nimport { ElMessage, ElMessageBox } from 'element-plus';\nimport { getToken } from '@/utils/auth';\nimport { useUserStore } from '@/store/user';\n\n// 创建axios实例\nconst service = axios.create({\n  baseURL: '/api',\n  // API基础URL\n  timeout: 15000 // 请求超时时间\n});\n\n// 请求拦截器\nservice.interceptors.request.use(config => {\n  const token = getToken();\n  if (token) {\n    config.headers['Authorization'] = `Bearer ${token}`;\n  }\n  return config;\n}, error => {\n  console.error('请求错误:', error);\n  return Promise.reject(error);\n});\n\n// 响应拦截器\nservice.interceptors.response.use(response => {\n  const res = response.data;\n\n  // 如果返回的状态码不是200，说明接口请求有误\n  if (res.code !== 200) {\n    ElMessage({\n      message: res.message || '请求失败',\n      type: 'error',\n      duration: 5 * 1000\n    });\n\n    // 401: 未登录或token过期\n    if (res.code === 401) {\n      ElMessageBox.confirm('登录状态已过期，您可以继续留在该页面，或者重新登录', '系统提示', {\n        confirmButtonText: '重新登录',\n        cancelButtonText: '取消',\n        type: 'warning'\n      }).then(() => {\n        const userStore = useUserStore();\n        userStore.resetState();\n        location.reload();\n      });\n    }\n    return Promise.reject(new Error(res.message || '请求失败'));\n  } else {\n    return res;\n  }\n}, error => {\n  console.error('响应错误:', error);\n\n  // 处理网络错误\n  let message = '网络错误，请稍后重试';\n  let userStore;\n  if (error.response) {\n    switch (error.response.status) {\n      case 401:\n        message = '未授权，请重新登录';\n        userStore = useUserStore();\n        userStore.resetState();\n        location.reload();\n        break;\n      case 403:\n        message = '拒绝访问';\n        break;\n      case 404:\n        message = '请求的资源不存在';\n        break;\n      case 500:\n        message = '服务器内部错误';\n        break;\n      default:\n        message = `请求失败: ${error.response.status}`;\n    }\n  }\n  ElMessage({\n    message: message,\n    type: 'error',\n    duration: 5 * 1000\n  });\n  return Promise.reject(error);\n});\nexport default service;","map":{"version":3,"names":["axios","ElMessage","ElMessageBox","getToken","useUserStore","service","create","baseURL","timeout","interceptors","request","use","config","token","headers","error","console","Promise","reject","response","res","data","code","message","type","duration","confirm","confirmButtonText","cancelButtonText","then","userStore","resetState","location","reload","Error","status"],"sources":["/Users/ls/echo_pro/echo-blog-vue/src/utils/request.js"],"sourcesContent":["import axios from 'axios'\nimport { ElMessage, ElMessageBox } from 'element-plus'\nimport { getToken } from '@/utils/auth'\nimport { useUserStore } from '@/store/user'\n\n// 创建axios实例\nconst service = axios.create({\n  baseURL: '/api', // API基础URL\n  timeout: 15000 // 请求超时时间\n})\n\n// 请求拦截器\nservice.interceptors.request.use(\n  config => {\n    const token = getToken()\n    if (token) {\n      config.headers['Authorization'] = `Bearer ${token}`\n    }\n    return config\n  },\n  error => {\n    console.error('请求错误:', error)\n    return Promise.reject(error)\n  }\n)\n\n// 响应拦截器\nservice.interceptors.response.use(\n  response => {\n    const res = response.data\n    \n    // 如果返回的状态码不是200，说明接口请求有误\n    if (res.code !== 200) {\n      ElMessage({\n        message: res.message || '请求失败',\n        type: 'error',\n        duration: 5 * 1000\n      })\n      \n      // 401: 未登录或token过期\n      if (res.code === 401) {\n        ElMessageBox.confirm(\n          '登录状态已过期，您可以继续留在该页面，或者重新登录',\n          '系统提示',\n          {\n            confirmButtonText: '重新登录',\n            cancelButtonText: '取消',\n            type: 'warning'\n          }\n        ).then(() => {\n          const userStore = useUserStore()\n          userStore.resetState()\n          location.reload()\n        })\n      }\n      \n      return Promise.reject(new Error(res.message || '请求失败'))\n    } else {\n      return res\n    }\n  },\n  error => {\n    console.error('响应错误:', error)\n    \n    // 处理网络错误\n    let message = '网络错误，请稍后重试'\n    let userStore\n    if (error.response) {\n      switch (error.response.status) {\n        case 401:\n          message = '未授权，请重新登录'\n          userStore = useUserStore()\n          userStore.resetState()\n          location.reload()\n          break\n        case 403:\n          message = '拒绝访问'\n          break\n        case 404:\n          message = '请求的资源不存在'\n          break\n        case 500:\n          message = '服务器内部错误'\n          break\n        default:\n          message = `请求失败: ${error.response.status}`\n      }\n    }\n    \n    ElMessage({\n      message: message,\n      type: 'error',\n      duration: 5 * 1000\n    })\n    \n    return Promise.reject(error)\n  }\n)\n\nexport default service "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}