{"ast":null,"code":"import { ref, reactive, onMounted } from 'vue';\nimport { ElMessage } from 'element-plus';\nexport default {\n  name: 'Profile',\n  setup() {\n    const activeTab = ref('basic');\n    const basicFormRef = ref(null);\n    const passwordFormRef = ref(null);\n    const defaultAvatar = '/src/assets/logo.png';\n\n    // 模拟用户数据\n    const userInfo = reactive({\n      username: 'admin',\n      nickname: '管理员',\n      email: 'admin@example.com',\n      avatar: '',\n      roles: ['ADMIN', 'USER']\n    });\n    const basicForm = reactive({\n      username: '',\n      nickname: '',\n      email: ''\n    });\n    const passwordForm = reactive({\n      oldPassword: '',\n      newPassword: '',\n      confirmPassword: ''\n    });\n    const basicRules = {\n      nickname: [{\n        required: true,\n        message: '请输入昵称',\n        trigger: 'blur'\n      }, {\n        min: 2,\n        max: 20,\n        message: '长度在 2 到 20 个字符',\n        trigger: 'blur'\n      }],\n      email: [{\n        required: true,\n        message: '请输入邮箱',\n        trigger: 'blur'\n      }, {\n        type: 'email',\n        message: '请输入正确的邮箱格式',\n        trigger: 'blur'\n      }]\n    };\n    const passwordRules = {\n      oldPassword: [{\n        required: true,\n        message: '请输入原密码',\n        trigger: 'blur'\n      }],\n      newPassword: [{\n        required: true,\n        message: '请输入新密码',\n        trigger: 'blur'\n      }, {\n        min: 6,\n        max: 20,\n        message: '长度在 6 到 20 个字符',\n        trigger: 'blur'\n      }],\n      confirmPassword: [{\n        required: true,\n        message: '请确认新密码',\n        trigger: 'blur'\n      }, {\n        validator: (rule, value, callback) => {\n          if (value !== passwordForm.newPassword) {\n            callback(new Error('两次输入的密码不一致'));\n          } else {\n            callback();\n          }\n        },\n        trigger: 'blur'\n      }]\n    };\n\n    // 获取用户信息\n    const fetchUserInfo = () => {\n      // 模拟API请求\n      setTimeout(() => {\n        Object.assign(basicForm, {\n          username: userInfo.username,\n          nickname: userInfo.nickname,\n          email: userInfo.email\n        });\n      }, 500);\n    };\n\n    // 更新基本信息\n    const updateBasicInfo = async () => {\n      if (!basicFormRef.value) return;\n      await basicFormRef.value.validate(valid => {\n        if (valid) {\n          // 模拟API请求\n          setTimeout(() => {\n            Object.assign(userInfo, {\n              nickname: basicForm.nickname,\n              email: basicForm.email\n            });\n            ElMessage.success('基本信息更新成功');\n          }, 500);\n        }\n      });\n    };\n\n    // 更新密码\n    const updatePassword = async () => {\n      if (!passwordFormRef.value) return;\n      await passwordFormRef.value.validate(valid => {\n        if (valid) {\n          // 模拟API请求\n          setTimeout(() => {\n            ElMessage.success('密码修改成功');\n            passwordForm.oldPassword = '';\n            passwordForm.newPassword = '';\n            passwordForm.confirmPassword = '';\n          }, 500);\n        }\n      });\n    };\n\n    // 处理头像上传成功\n    const handleAvatarSuccess = res => {\n      userInfo.avatar = res.data.url;\n      ElMessage.success('头像上传成功');\n    };\n\n    // 上传前检查\n    const beforeAvatarUpload = file => {\n      const isImage = file.type.startsWith('image/');\n      const isLt2M = file.size / 1024 / 1024 < 2;\n      if (!isImage) {\n        ElMessage.error('上传头像图片只能是图片格式!');\n      }\n      if (!isLt2M) {\n        ElMessage.error('上传头像图片大小不能超过 2MB!');\n      }\n      return isImage && isLt2M;\n    };\n\n    // 获取角色名称\n    const getRoleName = role => {\n      const roleMap = {\n        'ADMIN': '管理员',\n        'USER': '普通用户',\n        'EDITOR': '编辑'\n      };\n      return roleMap[role] || role;\n    };\n    onMounted(() => {\n      fetchUserInfo();\n    });\n    return {\n      activeTab,\n      userInfo,\n      basicForm,\n      passwordForm,\n      basicFormRef,\n      passwordFormRef,\n      basicRules,\n      passwordRules,\n      defaultAvatar,\n      updateBasicInfo,\n      updatePassword,\n      handleAvatarSuccess,\n      beforeAvatarUpload,\n      getRoleName\n    };\n  }\n};","map":{"version":3,"names":["ref","reactive","onMounted","ElMessage","name","setup","activeTab","basicFormRef","passwordFormRef","defaultAvatar","userInfo","username","nickname","email","avatar","roles","basicForm","passwordForm","oldPassword","newPassword","confirmPassword","basicRules","required","message","trigger","min","max","type","passwordRules","validator","rule","value","callback","Error","fetchUserInfo","setTimeout","Object","assign","updateBasicInfo","validate","valid","success","updatePassword","handleAvatarSuccess","res","data","url","beforeAvatarUpload","file","isImage","startsWith","isLt2M","size","error","getRoleName","role","roleMap"],"sources":["/Users/ls/echo_pro/echo-blog-vue/src/views/profile/index.vue"],"sourcesContent":["<template>\n  <div class=\"profile-container\">\n    <el-row :gutter=\"20\">\n      <el-col :span=\"8\">\n        <el-card class=\"user-card\">\n          <div class=\"user-info\">\n            <div class=\"avatar-container\">\n              <img :src=\"userInfo.avatar || defaultAvatar\" class=\"avatar\" alt=\"avatar\">\n              <el-upload\n                class=\"avatar-uploader\"\n                action=\"/api/upload/avatar\"\n                :show-file-list=\"false\"\n                :on-success=\"handleAvatarSuccess\"\n                :before-upload=\"beforeAvatarUpload\"\n              >\n                <el-button size=\"small\" type=\"primary\" class=\"upload-btn\">更换头像</el-button>\n              </el-upload>\n            </div>\n            <h3 class=\"username\">{{ userInfo.nickname || userInfo.username }}</h3>\n            <p class=\"email\">{{ userInfo.email }}</p>\n            <div class=\"user-roles\">\n              <el-tag v-for=\"role in userInfo.roles\" :key=\"role\" size=\"small\" class=\"role-tag\">\n                {{ getRoleName(role) }}\n              </el-tag>\n            </div>\n          </div>\n        </el-card>\n      </el-col>\n      \n      <el-col :span=\"16\">\n        <el-tabs v-model=\"activeTab\">\n          <el-tab-pane label=\"基本信息\" name=\"basic\">\n            <el-card>\n              <el-form :model=\"basicForm\" :rules=\"basicRules\" ref=\"basicFormRef\" label-width=\"100px\">\n                <el-form-item label=\"用户名\">\n                  <el-input v-model=\"basicForm.username\" disabled></el-input>\n                </el-form-item>\n                \n                <el-form-item label=\"昵称\" prop=\"nickname\">\n                  <el-input v-model=\"basicForm.nickname\" placeholder=\"请输入昵称\"></el-input>\n                </el-form-item>\n                \n                <el-form-item label=\"邮箱\" prop=\"email\">\n                  <el-input v-model=\"basicForm.email\" placeholder=\"请输入邮箱\"></el-input>\n                </el-form-item>\n                \n                <el-form-item>\n                  <el-button type=\"primary\" @click=\"updateBasicInfo\">保存</el-button>\n                </el-form-item>\n              </el-form>\n            </el-card>\n          </el-tab-pane>\n          \n          <el-tab-pane label=\"修改密码\" name=\"password\">\n            <el-card>\n              <el-form :model=\"passwordForm\" :rules=\"passwordRules\" ref=\"passwordFormRef\" label-width=\"100px\">\n                <el-form-item label=\"原密码\" prop=\"oldPassword\">\n                  <el-input v-model=\"passwordForm.oldPassword\" type=\"password\" placeholder=\"请输入原密码\" show-password></el-input>\n                </el-form-item>\n                \n                <el-form-item label=\"新密码\" prop=\"newPassword\">\n                  <el-input v-model=\"passwordForm.newPassword\" type=\"password\" placeholder=\"请输入新密码\" show-password></el-input>\n                </el-form-item>\n                \n                <el-form-item label=\"确认密码\" prop=\"confirmPassword\">\n                  <el-input v-model=\"passwordForm.confirmPassword\" type=\"password\" placeholder=\"请确认新密码\" show-password></el-input>\n                </el-form-item>\n                \n                <el-form-item>\n                  <el-button type=\"primary\" @click=\"updatePassword\">保存</el-button>\n                </el-form-item>\n              </el-form>\n            </el-card>\n          </el-tab-pane>\n          \n          <el-tab-pane label=\"账号安全\" name=\"security\">\n            <el-card>\n              <div class=\"security-item\">\n                <div class=\"security-info\">\n                  <h4>账号密码</h4>\n                  <p>定期修改密码可以提高账号安全性</p>\n                </div>\n                <el-button @click=\"activeTab = 'password'\">修改</el-button>\n              </div>\n              \n              <div class=\"security-item\">\n                <div class=\"security-info\">\n                  <h4>邮箱绑定</h4>\n                  <p>已绑定邮箱：{{ userInfo.email }}</p>\n                </div>\n                <el-button @click=\"activeTab = 'basic'\">修改</el-button>\n              </div>\n            </el-card>\n          </el-tab-pane>\n        </el-tabs>\n      </el-col>\n    </el-row>\n  </div>\n</template>\n\n<script>\nimport { ref, reactive, onMounted } from 'vue'\nimport { ElMessage } from 'element-plus'\n\nexport default {\n  name: 'Profile',\n  setup() {\n    const activeTab = ref('basic')\n    const basicFormRef = ref(null)\n    const passwordFormRef = ref(null)\n    const defaultAvatar = '/src/assets/logo.png'\n    \n    // 模拟用户数据\n    const userInfo = reactive({\n      username: 'admin',\n      nickname: '管理员',\n      email: 'admin@example.com',\n      avatar: '',\n      roles: ['ADMIN', 'USER']\n    })\n    \n    const basicForm = reactive({\n      username: '',\n      nickname: '',\n      email: ''\n    })\n    \n    const passwordForm = reactive({\n      oldPassword: '',\n      newPassword: '',\n      confirmPassword: ''\n    })\n    \n    const basicRules = {\n      nickname: [\n        { required: true, message: '请输入昵称', trigger: 'blur' },\n        { min: 2, max: 20, message: '长度在 2 到 20 个字符', trigger: 'blur' }\n      ],\n      email: [\n        { required: true, message: '请输入邮箱', trigger: 'blur' },\n        { type: 'email', message: '请输入正确的邮箱格式', trigger: 'blur' }\n      ]\n    }\n    \n    const passwordRules = {\n      oldPassword: [\n        { required: true, message: '请输入原密码', trigger: 'blur' }\n      ],\n      newPassword: [\n        { required: true, message: '请输入新密码', trigger: 'blur' },\n        { min: 6, max: 20, message: '长度在 6 到 20 个字符', trigger: 'blur' }\n      ],\n      confirmPassword: [\n        { required: true, message: '请确认新密码', trigger: 'blur' },\n        {\n          validator: (rule, value, callback) => {\n            if (value !== passwordForm.newPassword) {\n              callback(new Error('两次输入的密码不一致'))\n            } else {\n              callback()\n            }\n          },\n          trigger: 'blur'\n        }\n      ]\n    }\n    \n    // 获取用户信息\n    const fetchUserInfo = () => {\n      // 模拟API请求\n      setTimeout(() => {\n        Object.assign(basicForm, {\n          username: userInfo.username,\n          nickname: userInfo.nickname,\n          email: userInfo.email\n        })\n      }, 500)\n    }\n    \n    // 更新基本信息\n    const updateBasicInfo = async () => {\n      if (!basicFormRef.value) return\n      \n      await basicFormRef.value.validate((valid) => {\n        if (valid) {\n          // 模拟API请求\n          setTimeout(() => {\n            Object.assign(userInfo, {\n              nickname: basicForm.nickname,\n              email: basicForm.email\n            })\n            ElMessage.success('基本信息更新成功')\n          }, 500)\n        }\n      })\n    }\n    \n    // 更新密码\n    const updatePassword = async () => {\n      if (!passwordFormRef.value) return\n      \n      await passwordFormRef.value.validate((valid) => {\n        if (valid) {\n          // 模拟API请求\n          setTimeout(() => {\n            ElMessage.success('密码修改成功')\n            passwordForm.oldPassword = ''\n            passwordForm.newPassword = ''\n            passwordForm.confirmPassword = ''\n          }, 500)\n        }\n      })\n    }\n    \n    // 处理头像上传成功\n    const handleAvatarSuccess = (res) => {\n      userInfo.avatar = res.data.url\n      ElMessage.success('头像上传成功')\n    }\n    \n    // 上传前检查\n    const beforeAvatarUpload = (file) => {\n      const isImage = file.type.startsWith('image/')\n      const isLt2M = file.size / 1024 / 1024 < 2\n      \n      if (!isImage) {\n        ElMessage.error('上传头像图片只能是图片格式!')\n      }\n      \n      if (!isLt2M) {\n        ElMessage.error('上传头像图片大小不能超过 2MB!')\n      }\n      \n      return isImage && isLt2M\n    }\n    \n    // 获取角色名称\n    const getRoleName = (role) => {\n      const roleMap = {\n        'ADMIN': '管理员',\n        'USER': '普通用户',\n        'EDITOR': '编辑'\n      }\n      return roleMap[role] || role\n    }\n    \n    onMounted(() => {\n      fetchUserInfo()\n    })\n    \n    return {\n      activeTab,\n      userInfo,\n      basicForm,\n      passwordForm,\n      basicFormRef,\n      passwordFormRef,\n      basicRules,\n      passwordRules,\n      defaultAvatar,\n      updateBasicInfo,\n      updatePassword,\n      handleAvatarSuccess,\n      beforeAvatarUpload,\n      getRoleName\n    }\n  }\n}\n</script>\n\n<style scoped>\n.profile-container {\n  padding: 20px;\n}\n\n.user-card {\n  text-align: center;\n  height: 100%;\n}\n\n.avatar-container {\n  margin-bottom: 20px;\n}\n\n.avatar {\n  width: 120px;\n  height: 120px;\n  border-radius: 50%;\n  margin-bottom: 10px;\n}\n\n.upload-btn {\n  margin-top: 10px;\n}\n\n.username {\n  font-size: 20px;\n  font-weight: 500;\n  margin: 10px 0;\n}\n\n.email {\n  color: #909399;\n  margin-bottom: 15px;\n}\n\n.user-roles {\n  display: flex;\n  justify-content: center;\n  flex-wrap: wrap;\n}\n\n.role-tag {\n  margin: 0 5px 5px 0;\n}\n\n.security-item {\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n  padding: 15px 0;\n  border-bottom: 1px solid #ebeef5;\n}\n\n.security-item:last-child {\n  border-bottom: none;\n}\n\n.security-info h4 {\n  margin: 0 0 5px 0;\n  font-size: 16px;\n}\n\n.security-info p {\n  margin: 0;\n  color: #909399;\n  font-size: 14px;\n}\n</style> "],"mappings":"AAqGA,SAASA,GAAG,EAAEC,QAAQ,EAAEC,SAAQ,QAAS,KAAI;AAC7C,SAASC,SAAQ,QAAS,cAAa;AAEvC,eAAe;EACbC,IAAI,EAAE,SAAS;EACfC,KAAKA,CAAA,EAAG;IACN,MAAMC,SAAQ,GAAIN,GAAG,CAAC,OAAO;IAC7B,MAAMO,YAAW,GAAIP,GAAG,CAAC,IAAI;IAC7B,MAAMQ,eAAc,GAAIR,GAAG,CAAC,IAAI;IAChC,MAAMS,aAAY,GAAI,sBAAqB;;IAE3C;IACA,MAAMC,QAAO,GAAIT,QAAQ,CAAC;MACxBU,QAAQ,EAAE,OAAO;MACjBC,QAAQ,EAAE,KAAK;MACfC,KAAK,EAAE,mBAAmB;MAC1BC,MAAM,EAAE,EAAE;MACVC,KAAK,EAAE,CAAC,OAAO,EAAE,MAAM;IACzB,CAAC;IAED,MAAMC,SAAQ,GAAIf,QAAQ,CAAC;MACzBU,QAAQ,EAAE,EAAE;MACZC,QAAQ,EAAE,EAAE;MACZC,KAAK,EAAE;IACT,CAAC;IAED,MAAMI,YAAW,GAAIhB,QAAQ,CAAC;MAC5BiB,WAAW,EAAE,EAAE;MACfC,WAAW,EAAE,EAAE;MACfC,eAAe,EAAE;IACnB,CAAC;IAED,MAAMC,UAAS,GAAI;MACjBT,QAAQ,EAAE,CACR;QAAEU,QAAQ,EAAE,IAAI;QAAEC,OAAO,EAAE,OAAO;QAAEC,OAAO,EAAE;MAAO,CAAC,EACrD;QAAEC,GAAG,EAAE,CAAC;QAAEC,GAAG,EAAE,EAAE;QAAEH,OAAO,EAAE,gBAAgB;QAAEC,OAAO,EAAE;MAAO,EAC/D;MACDX,KAAK,EAAE,CACL;QAAES,QAAQ,EAAE,IAAI;QAAEC,OAAO,EAAE,OAAO;QAAEC,OAAO,EAAE;MAAO,CAAC,EACrD;QAAEG,IAAI,EAAE,OAAO;QAAEJ,OAAO,EAAE,YAAY;QAAEC,OAAO,EAAE;MAAO;IAE5D;IAEA,MAAMI,aAAY,GAAI;MACpBV,WAAW,EAAE,CACX;QAAEI,QAAQ,EAAE,IAAI;QAAEC,OAAO,EAAE,QAAQ;QAAEC,OAAO,EAAE;MAAO,EACtD;MACDL,WAAW,EAAE,CACX;QAAEG,QAAQ,EAAE,IAAI;QAAEC,OAAO,EAAE,QAAQ;QAAEC,OAAO,EAAE;MAAO,CAAC,EACtD;QAAEC,GAAG,EAAE,CAAC;QAAEC,GAAG,EAAE,EAAE;QAAEH,OAAO,EAAE,gBAAgB;QAAEC,OAAO,EAAE;MAAO,EAC/D;MACDJ,eAAe,EAAE,CACf;QAAEE,QAAQ,EAAE,IAAI;QAAEC,OAAO,EAAE,QAAQ;QAAEC,OAAO,EAAE;MAAO,CAAC,EACtD;QACEK,SAAS,EAAEA,CAACC,IAAI,EAAEC,KAAK,EAAEC,QAAQ,KAAK;UACpC,IAAID,KAAI,KAAMd,YAAY,CAACE,WAAW,EAAE;YACtCa,QAAQ,CAAC,IAAIC,KAAK,CAAC,YAAY,CAAC;UAClC,OAAO;YACLD,QAAQ,CAAC;UACX;QACF,CAAC;QACDR,OAAO,EAAE;MACX;IAEJ;;IAEA;IACA,MAAMU,aAAY,GAAIA,CAAA,KAAM;MAC1B;MACAC,UAAU,CAAC,MAAM;QACfC,MAAM,CAACC,MAAM,CAACrB,SAAS,EAAE;UACvBL,QAAQ,EAAED,QAAQ,CAACC,QAAQ;UAC3BC,QAAQ,EAAEF,QAAQ,CAACE,QAAQ;UAC3BC,KAAK,EAAEH,QAAQ,CAACG;QAClB,CAAC;MACH,CAAC,EAAE,GAAG;IACR;;IAEA;IACA,MAAMyB,eAAc,GAAI,MAAAA,CAAA,KAAY;MAClC,IAAI,CAAC/B,YAAY,CAACwB,KAAK,EAAE;MAEzB,MAAMxB,YAAY,CAACwB,KAAK,CAACQ,QAAQ,CAAEC,KAAK,IAAK;QAC3C,IAAIA,KAAK,EAAE;UACT;UACAL,UAAU,CAAC,MAAM;YACfC,MAAM,CAACC,MAAM,CAAC3B,QAAQ,EAAE;cACtBE,QAAQ,EAAEI,SAAS,CAACJ,QAAQ;cAC5BC,KAAK,EAAEG,SAAS,CAACH;YACnB,CAAC;YACDV,SAAS,CAACsC,OAAO,CAAC,UAAU;UAC9B,CAAC,EAAE,GAAG;QACR;MACF,CAAC;IACH;;IAEA;IACA,MAAMC,cAAa,GAAI,MAAAA,CAAA,KAAY;MACjC,IAAI,CAAClC,eAAe,CAACuB,KAAK,EAAE;MAE5B,MAAMvB,eAAe,CAACuB,KAAK,CAACQ,QAAQ,CAAEC,KAAK,IAAK;QAC9C,IAAIA,KAAK,EAAE;UACT;UACAL,UAAU,CAAC,MAAM;YACfhC,SAAS,CAACsC,OAAO,CAAC,QAAQ;YAC1BxB,YAAY,CAACC,WAAU,GAAI,EAAC;YAC5BD,YAAY,CAACE,WAAU,GAAI,EAAC;YAC5BF,YAAY,CAACG,eAAc,GAAI,EAAC;UAClC,CAAC,EAAE,GAAG;QACR;MACF,CAAC;IACH;;IAEA;IACA,MAAMuB,mBAAkB,GAAKC,GAAG,IAAK;MACnClC,QAAQ,CAACI,MAAK,GAAI8B,GAAG,CAACC,IAAI,CAACC,GAAE;MAC7B3C,SAAS,CAACsC,OAAO,CAAC,QAAQ;IAC5B;;IAEA;IACA,MAAMM,kBAAiB,GAAKC,IAAI,IAAK;MACnC,MAAMC,OAAM,GAAID,IAAI,CAACrB,IAAI,CAACuB,UAAU,CAAC,QAAQ;MAC7C,MAAMC,MAAK,GAAIH,IAAI,CAACI,IAAG,GAAI,IAAG,GAAI,IAAG,GAAI;MAEzC,IAAI,CAACH,OAAO,EAAE;QACZ9C,SAAS,CAACkD,KAAK,CAAC,gBAAgB;MAClC;MAEA,IAAI,CAACF,MAAM,EAAE;QACXhD,SAAS,CAACkD,KAAK,CAAC,mBAAmB;MACrC;MAEA,OAAOJ,OAAM,IAAKE,MAAK;IACzB;;IAEA;IACA,MAAMG,WAAU,GAAKC,IAAI,IAAK;MAC5B,MAAMC,OAAM,GAAI;QACd,OAAO,EAAE,KAAK;QACd,MAAM,EAAE,MAAM;QACd,QAAQ,EAAE;MACZ;MACA,OAAOA,OAAO,CAACD,IAAI,KAAKA,IAAG;IAC7B;IAEArD,SAAS,CAAC,MAAM;MACdgC,aAAa,CAAC;IAChB,CAAC;IAED,OAAO;MACL5B,SAAS;MACTI,QAAQ;MACRM,SAAS;MACTC,YAAY;MACZV,YAAY;MACZC,eAAe;MACfa,UAAU;MACVO,aAAa;MACbnB,aAAa;MACb6B,eAAe;MACfI,cAAc;MACdC,mBAAmB;MACnBI,kBAAkB;MAClBO;IACF;EACF;AACF","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}