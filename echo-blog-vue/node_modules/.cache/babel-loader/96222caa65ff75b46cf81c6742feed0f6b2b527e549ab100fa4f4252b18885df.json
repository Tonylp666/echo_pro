{"ast":null,"code":"import { renderList as _renderList, Fragment as _Fragment, openBlock as _openBlock, createElementBlock as _createElementBlock, toDisplayString as _toDisplayString, createTextVNode as _createTextVNode, resolveComponent as _resolveComponent, withCtx as _withCtx, createBlock as _createBlock } from \"vue\";\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  const _component_el_breadcrumb_item = _resolveComponent(\"el-breadcrumb-item\");\n  const _component_el_breadcrumb = _resolveComponent(\"el-breadcrumb\");\n  return _openBlock(), _createBlock(_component_el_breadcrumb, {\n    separator: \"/\"\n  }, {\n    default: _withCtx(() => [(_openBlock(true), _createElementBlock(_Fragment, null, _renderList($setup.breadcrumbs, (item, index) => {\n      return _openBlock(), _createBlock(_component_el_breadcrumb_item, {\n        key: index,\n        to: item.path\n      }, {\n        default: _withCtx(() => [_createTextVNode(_toDisplayString(item.title), 1 /* TEXT */)]),\n        _: 2 /* DYNAMIC */\n      }, 1032 /* PROPS, DYNAMIC_SLOTS */, [\"to\"]);\n    }), 128 /* KEYED_FRAGMENT */))]),\n    _: 1 /* STABLE */\n  });\n}","map":{"version":3,"names":["_createBlock","_component_el_breadcrumb","separator","default","_withCtx","_createElementBlock","_Fragment","_renderList","$setup","breadcrumbs","item","index","_component_el_breadcrumb_item","key","to","path","_createTextVNode","_toDisplayString","title","_"],"sources":["/Users/ls/echo_pro/echo-blog-vue/src/layout/components/Breadcrumb.vue"],"sourcesContent":["<template>\n  <el-breadcrumb separator=\"/\">\n    <el-breadcrumb-item v-for=\"(item, index) in breadcrumbs\" :key=\"index\" :to=\"item.path\">\n      {{ item.title }}\n    </el-breadcrumb-item>\n  </el-breadcrumb>\n</template>\n\n<script>\nimport { ref, watch } from 'vue'\nimport { useRoute } from 'vue-router'\n\nexport default {\n  name: 'Breadcrumb',\n  setup() {\n    const route = useRoute()\n    const breadcrumbs = ref([])\n    \n    const getBreadcrumbs = () => {\n      const matched = route.matched.filter(item => item.meta && item.meta.title)\n      \n      const first = matched[0]\n      if (first && first.path !== '/dashboard') {\n        breadcrumbs.value = [\n          { path: '/dashboard', title: '首页' },\n          ...matched.map(item => {\n            return {\n              path: item.path,\n              title: item.meta.title\n            }\n          })\n        ]\n      } else {\n        breadcrumbs.value = matched.map(item => {\n          return {\n            path: item.path,\n            title: item.meta.title\n          }\n        })\n      }\n    }\n    \n    getBreadcrumbs()\n    \n    watch(() => route.path, () => {\n      getBreadcrumbs()\n    })\n    \n    return {\n      breadcrumbs\n    }\n  }\n}\n</script>\n\n<style lang=\"scss\" scoped>\n.el-breadcrumb {\n  font-size: 14px;\n  line-height: 50px;\n  \n  .no-redirect {\n    color: #97a8be;\n    cursor: text;\n  }\n  \n  a {\n    color: #606266;\n    cursor: pointer;\n    \n    &:hover {\n      color: #409EFF;\n    }\n  }\n}\n</style> "],"mappings":";;;;uBACEA,YAAA,CAIgBC,wBAAA;IAJDC,SAAS,EAAC;EAAG;IAD9BC,OAAA,EAAAC,QAAA,CAEwB,MAAoC,E,kBAAxDC,mBAAA,CAEqBC,SAAA,QAJzBC,WAAA,CAEgDC,MAAA,CAAAC,WAAW,EAF3D,CAEgCC,IAAI,EAAEC,KAAK;2BAAvCX,YAAA,CAEqBY,6BAAA;QAFqCC,GAAG,EAAEF,KAAK;QAAGG,EAAE,EAAEJ,IAAI,CAACK;;QAFpFZ,OAAA,EAAAC,QAAA,CAGM,MAAgB,CAHtBY,gBAAA,CAAAC,gBAAA,CAGSP,IAAI,CAACQ,KAAK,iB;QAHnBC,CAAA;;;IAAAA,CAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}