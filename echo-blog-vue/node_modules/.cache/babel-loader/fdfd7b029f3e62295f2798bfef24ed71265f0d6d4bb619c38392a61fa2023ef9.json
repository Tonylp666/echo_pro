{"ast":null,"code":"import { ref, reactive, onMounted } from 'vue';\nimport { useRouter } from 'vue-router';\nimport { ElMessage, ElMessageBox } from 'element-plus';\nimport { getArticles, deleteArticle, updateArticleStatus } from '@/api/article';\nimport { getCategories } from '@/api/category';\nexport default {\n  __name: 'index',\n  setup(__props, {\n    expose: __expose\n  }) {\n    __expose();\n    const router = useRouter();\n\n    // 文章列表\n    const articleList = ref([]);\n    const loading = ref(false);\n    const total = ref(0);\n\n    // 分类列表\n    const categoryList = ref([]);\n\n    // 查询参数\n    const queryParams = reactive({\n      current: 1,\n      size: 10,\n      keyword: ''\n    });\n\n    // 获取文章列表\n    const getArticleList = async () => {\n      loading.value = true;\n      try {\n        const {\n          data\n        } = await getArticles({\n          current: queryParams.current,\n          size: queryParams.size,\n          keyword: queryParams.keyword\n        });\n        articleList.value = data.records;\n        total.value = data.total;\n      } catch (error) {\n        console.error('获取文章列表失败:', error);\n        ElMessage.error('获取文章列表失败');\n      } finally {\n        loading.value = false;\n      }\n    };\n\n    // 获取分类列表\n    const getCategoryList = async () => {\n      try {\n        const {\n          data\n        } = await getCategories();\n        categoryList.value = data;\n      } catch (error) {\n        console.error('获取分类列表失败:', error);\n      }\n    };\n\n    // 获取分类名称\n    const getCategoryName = categoryId => {\n      const category = categoryList.value.find(item => item.id === categoryId);\n      return category ? category.name : '未分类';\n    };\n\n    // 获取状态类型\n    const getStatusType = status => {\n      const map = {\n        'DRAFT': 'info',\n        'PUBLISHED': 'success',\n        'UNPUBLISHED': 'warning',\n        'DELETED': 'danger'\n      };\n      return map[status] || 'info';\n    };\n\n    // 获取状态文本\n    const getStatusText = status => {\n      const map = {\n        'DRAFT': '草稿',\n        'PUBLISHED': '已发布',\n        'UNPUBLISHED': '已下线',\n        'DELETED': '已删除'\n      };\n      return map[status] || '未知';\n    };\n\n    // 创建文章\n    const handleCreateArticle = () => {\n      router.push('/article/create');\n    };\n\n    // 编辑文章\n    const handleEditArticle = id => {\n      router.push(`/article/edit/${id}`);\n    };\n\n    // 发布文章\n    const handlePublishArticle = async id => {\n      try {\n        await updateArticleStatus(id, 'PUBLISHED');\n        ElMessage.success('文章发布成功');\n        getArticleList();\n      } catch (error) {\n        console.error('发布文章失败:', error);\n        ElMessage.error('发布文章失败');\n      }\n    };\n\n    // 下线文章\n    const handleUnpublishArticle = async id => {\n      try {\n        await updateArticleStatus(id, 'UNPUBLISHED');\n        ElMessage.success('文章已下线');\n        getArticleList();\n      } catch (error) {\n        console.error('下线文章失败:', error);\n        ElMessage.error('下线文章失败');\n      }\n    };\n\n    // 删除文章\n    const handleDeleteArticle = id => {\n      ElMessageBox.confirm('确定要删除该文章吗？删除后不可恢复！', '警告', {\n        confirmButtonText: '确定',\n        cancelButtonText: '取消',\n        type: 'warning'\n      }).then(async () => {\n        try {\n          await deleteArticle(id);\n          ElMessage.success('删除成功');\n          getArticleList();\n        } catch (error) {\n          console.error('删除文章失败:', error);\n          ElMessage.error('删除文章失败');\n        }\n      }).catch(() => {});\n    };\n\n    // 搜索\n    const handleSearch = () => {\n      queryParams.current = 1;\n      getArticleList();\n    };\n\n    // 分页处理\n    const handleSizeChange = size => {\n      queryParams.size = size;\n      getArticleList();\n    };\n    const handleCurrentChange = current => {\n      queryParams.current = current;\n      getArticleList();\n    };\n    onMounted(() => {\n      getArticleList();\n      getCategoryList();\n    });\n    const __returned__ = {\n      router,\n      articleList,\n      loading,\n      total,\n      categoryList,\n      queryParams,\n      getArticleList,\n      getCategoryList,\n      getCategoryName,\n      getStatusType,\n      getStatusText,\n      handleCreateArticle,\n      handleEditArticle,\n      handlePublishArticle,\n      handleUnpublishArticle,\n      handleDeleteArticle,\n      handleSearch,\n      handleSizeChange,\n      handleCurrentChange,\n      ref,\n      reactive,\n      onMounted,\n      get useRouter() {\n        return useRouter;\n      },\n      get ElMessage() {\n        return ElMessage;\n      },\n      get ElMessageBox() {\n        return ElMessageBox;\n      },\n      get getArticles() {\n        return getArticles;\n      },\n      get deleteArticle() {\n        return deleteArticle;\n      },\n      get updateArticleStatus() {\n        return updateArticleStatus;\n      },\n      get getCategories() {\n        return getCategories;\n      }\n    };\n    Object.defineProperty(__returned__, '__isScriptSetup', {\n      enumerable: false,\n      value: true\n    });\n    return __returned__;\n  }\n};","map":{"version":3,"names":["ref","reactive","onMounted","useRouter","ElMessage","ElMessageBox","getArticles","deleteArticle","updateArticleStatus","getCategories","router","articleList","loading","total","categoryList","queryParams","current","size","keyword","getArticleList","value","data","records","error","console","getCategoryList","getCategoryName","categoryId","category","find","item","id","name","getStatusType","status","map","getStatusText","handleCreateArticle","push","handleEditArticle","handlePublishArticle","success","handleUnpublishArticle","handleDeleteArticle","confirm","confirmButtonText","cancelButtonText","type","then","catch","handleSearch","handleSizeChange","handleCurrentChange"],"sources":["/Users/ls/echo_pro/echo-blog-vue/src/views/article/index.vue"],"sourcesContent":["<template>\n  <div class=\"article-container app-container\">\n    <el-card class=\"box-card\">\n      <template #header>\n        <div class=\"card-header\">\n          <span>文章管理</span>\n          <div class=\"right-menu\">\n            <el-input\n              v-model=\"queryParams.keyword\"\n              placeholder=\"搜索文章标题\"\n              style=\"width: 200px; margin-right: 10px\"\n              clearable\n              @keyup.enter=\"handleSearch\"\n            >\n              <template #prefix>\n                <el-icon><Search /></el-icon>\n              </template>\n            </el-input>\n            <el-button type=\"primary\" @click=\"handleCreateArticle\">\n              <el-icon><Plus /></el-icon>\n              创建文章\n            </el-button>\n          </div>\n        </div>\n      </template>\n      \n      <el-table\n        v-loading=\"loading\"\n        :data=\"articleList\"\n        style=\"width: 100%\"\n        border\n      >\n        <el-table-column prop=\"id\" label=\"ID\" width=\"80\" />\n        <el-table-column prop=\"title\" label=\"标题\" min-width=\"200\" show-overflow-tooltip />\n        <el-table-column label=\"分类\" width=\"120\">\n          <template #default=\"{ row }\">\n            <el-tag size=\"small\">{{ getCategoryName(row.articleCategoryId) }}</el-tag>\n          </template>\n        </el-table-column>\n        <el-table-column label=\"状态\" width=\"100\">\n          <template #default=\"{ row }\">\n            <el-tag :type=\"getStatusType(row.status)\" size=\"small\">\n              {{ getStatusText(row.status) }}\n            </el-tag>\n          </template>\n        </el-table-column>\n        <el-table-column prop=\"viewCount\" label=\"浏览量\" width=\"100\" align=\"center\" />\n        <el-table-column prop=\"likeCount\" label=\"点赞量\" width=\"100\" align=\"center\" />\n        <el-table-column prop=\"createdTime\" label=\"创建时间\" width=\"180\" />\n        <el-table-column label=\"操作\" width=\"250\" fixed=\"right\">\n          <template #default=\"{ row }\">\n            <el-button\n              type=\"primary\"\n              size=\"small\"\n              @click=\"handleEditArticle(row.id)\"\n            >\n              编辑\n            </el-button>\n            <el-button\n              v-if=\"row.status === 'DRAFT'\"\n              type=\"success\"\n              size=\"small\"\n              @click=\"handlePublishArticle(row.id)\"\n            >\n              发布\n            </el-button>\n            <el-button\n              v-if=\"row.status === 'PUBLISHED'\"\n              type=\"warning\"\n              size=\"small\"\n              @click=\"handleUnpublishArticle(row.id)\"\n            >\n              下线\n            </el-button>\n            <el-button\n              type=\"danger\"\n              size=\"small\"\n              @click=\"handleDeleteArticle(row.id)\"\n            >\n              删除\n            </el-button>\n          </template>\n        </el-table-column>\n      </el-table>\n      \n      <div class=\"pagination-container\">\n        <el-pagination\n          v-model:current-page=\"queryParams.current\"\n          v-model:page-size=\"queryParams.size\"\n          :page-sizes=\"[10, 20, 50, 100]\"\n          layout=\"total, sizes, prev, pager, next, jumper\"\n          :total=\"total\"\n          @size-change=\"handleSizeChange\"\n          @current-change=\"handleCurrentChange\"\n        />\n      </div>\n    </el-card>\n  </div>\n</template>\n\n<script setup>\nimport { ref, reactive, onMounted } from 'vue'\nimport { useRouter } from 'vue-router'\nimport { ElMessage, ElMessageBox } from 'element-plus'\nimport { getArticles, deleteArticle, updateArticleStatus } from '@/api/article'\nimport { getCategories } from '@/api/category'\n\nconst router = useRouter()\n\n// 文章列表\nconst articleList = ref([])\nconst loading = ref(false)\nconst total = ref(0)\n\n// 分类列表\nconst categoryList = ref([])\n\n// 查询参数\nconst queryParams = reactive({\n  current: 1,\n  size: 10,\n  keyword: ''\n})\n\n// 获取文章列表\nconst getArticleList = async () => {\n  loading.value = true\n  try {\n    const { data } = await getArticles({\n      current: queryParams.current,\n      size: queryParams.size,\n      keyword: queryParams.keyword\n    })\n    articleList.value = data.records\n    total.value = data.total\n  } catch (error) {\n    console.error('获取文章列表失败:', error)\n    ElMessage.error('获取文章列表失败')\n  } finally {\n    loading.value = false\n  }\n}\n\n// 获取分类列表\nconst getCategoryList = async () => {\n  try {\n    const { data } = await getCategories()\n    categoryList.value = data\n  } catch (error) {\n    console.error('获取分类列表失败:', error)\n  }\n}\n\n// 获取分类名称\nconst getCategoryName = (categoryId) => {\n  const category = categoryList.value.find(item => item.id === categoryId)\n  return category ? category.name : '未分类'\n}\n\n// 获取状态类型\nconst getStatusType = (status) => {\n  const map = {\n    'DRAFT': 'info',\n    'PUBLISHED': 'success',\n    'UNPUBLISHED': 'warning',\n    'DELETED': 'danger'\n  }\n  return map[status] || 'info'\n}\n\n// 获取状态文本\nconst getStatusText = (status) => {\n  const map = {\n    'DRAFT': '草稿',\n    'PUBLISHED': '已发布',\n    'UNPUBLISHED': '已下线',\n    'DELETED': '已删除'\n  }\n  return map[status] || '未知'\n}\n\n// 创建文章\nconst handleCreateArticle = () => {\n  router.push('/article/create')\n}\n\n// 编辑文章\nconst handleEditArticle = (id) => {\n  router.push(`/article/edit/${id}`)\n}\n\n// 发布文章\nconst handlePublishArticle = async (id) => {\n  try {\n    await updateArticleStatus(id, 'PUBLISHED')\n    ElMessage.success('文章发布成功')\n    getArticleList()\n  } catch (error) {\n    console.error('发布文章失败:', error)\n    ElMessage.error('发布文章失败')\n  }\n}\n\n// 下线文章\nconst handleUnpublishArticle = async (id) => {\n  try {\n    await updateArticleStatus(id, 'UNPUBLISHED')\n    ElMessage.success('文章已下线')\n    getArticleList()\n  } catch (error) {\n    console.error('下线文章失败:', error)\n    ElMessage.error('下线文章失败')\n  }\n}\n\n// 删除文章\nconst handleDeleteArticle = (id) => {\n  ElMessageBox.confirm('确定要删除该文章吗？删除后不可恢复！', '警告', {\n    confirmButtonText: '确定',\n    cancelButtonText: '取消',\n    type: 'warning'\n  }).then(async () => {\n    try {\n      await deleteArticle(id)\n      ElMessage.success('删除成功')\n      getArticleList()\n    } catch (error) {\n      console.error('删除文章失败:', error)\n      ElMessage.error('删除文章失败')\n    }\n  }).catch(() => {})\n}\n\n// 搜索\nconst handleSearch = () => {\n  queryParams.current = 1\n  getArticleList()\n}\n\n// 分页处理\nconst handleSizeChange = (size) => {\n  queryParams.size = size\n  getArticleList()\n}\n\nconst handleCurrentChange = (current) => {\n  queryParams.current = current\n  getArticleList()\n}\n\nonMounted(() => {\n  getArticleList()\n  getCategoryList()\n})\n</script>\n\n<style lang=\"scss\" scoped>\n.article-container {\n  .right-menu {\n    display: flex;\n    align-items: center;\n  }\n}\n</style> "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}