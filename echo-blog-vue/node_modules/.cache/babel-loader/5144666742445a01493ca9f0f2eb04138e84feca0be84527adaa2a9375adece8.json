{"ast":null,"code":"import { ref, reactive, onMounted } from 'vue';\nimport { useRouter } from 'vue-router';\nimport { ElMessage, ElMessageBox } from 'element-plus';\nimport moment from 'moment';\nexport default {\n  name: 'AITasks',\n  setup() {\n    const router = useRouter();\n    const loading = ref(false);\n    const tasks = ref([]);\n    const total = ref(0);\n    const currentPage = ref(1);\n    const pageSize = ref(10);\n    const searchKeyword = ref('');\n    const taskType = ref('');\n    const status = ref('');\n    const createTaskDialogVisible = ref(false);\n    const taskFormRef = ref(null);\n    const taskDetailDialogVisible = ref(false);\n    const taskDetailLoading = ref(false);\n    const taskDetail = reactive({});\n    const taskForm = reactive({\n      taskName: '',\n      taskType: '',\n      aiModel: '',\n      articleCategoryId: null,\n      crawlerRuleId: null,\n      searchKeywords: '',\n      hotspotSource: '',\n      prompt: ''\n    });\n    const taskRules = {\n      taskName: [{\n        required: true,\n        message: '请输入任务名称',\n        trigger: 'blur'\n      }],\n      taskType: [{\n        required: true,\n        message: '请选择任务类型',\n        trigger: 'change'\n      }],\n      aiModel: [{\n        required: true,\n        message: '请选择AI模型',\n        trigger: 'change'\n      }],\n      articleCategoryId: [{\n        required: true,\n        message: '请选择文章分类',\n        trigger: 'change'\n      }],\n      crawlerRuleId: [{\n        required: true,\n        message: '请选择爬虫规则',\n        trigger: 'change'\n      }],\n      searchKeywords: [{\n        required: true,\n        message: '请输入搜索关键词',\n        trigger: 'blur'\n      }],\n      hotspotSource: [{\n        required: true,\n        message: '请选择热点来源',\n        trigger: 'change'\n      }]\n    };\n\n    // 模拟数据\n    const mockTasks = [{\n      id: 1,\n      taskName: '知乎热门文章生成',\n      taskType: 'CRAWLER',\n      aiModel: 'DEEPSEEK',\n      status: 'COMPLETED',\n      resultArticleId: 101,\n      createdTime: '2023-01-01 12:00:00',\n      updatedTime: '2023-01-01 12:05:00'\n    }, {\n      id: 2,\n      taskName: '搜索AI相关内容',\n      taskType: 'SEARCH',\n      aiModel: 'ALIYUN',\n      status: 'PROCESSING',\n      resultArticleId: null,\n      createdTime: '2023-01-02 12:00:00',\n      updatedTime: '2023-01-02 12:01:00'\n    }, {\n      id: 3,\n      taskName: '百度热搜话题分析',\n      taskType: 'HOTSPOT',\n      aiModel: 'DEEPSEEK',\n      status: 'FAILED',\n      resultArticleId: null,\n      createdTime: '2023-01-03 12:00:00',\n      updatedTime: '2023-01-03 12:02:00',\n      errorMessage: 'AI模型调用失败，请稍后重试'\n    }];\n\n    // 获取任务列表\n    const fetchTasks = () => {\n      loading.value = true;\n\n      // 模拟API请求\n      setTimeout(() => {\n        tasks.value = mockTasks;\n        total.value = mockTasks.length;\n        loading.value = false;\n      }, 500);\n    };\n\n    // 搜索\n    const handleSearch = () => {\n      currentPage.value = 1;\n      fetchTasks();\n    };\n\n    // 页码变化\n    const handleCurrentChange = page => {\n      currentPage.value = page;\n      fetchTasks();\n    };\n\n    // 每页条数变化\n    const handleSizeChange = size => {\n      pageSize.value = size;\n      currentPage.value = 1;\n      fetchTasks();\n    };\n\n    // 显示创建任务对话框\n    const showCreateTaskDialog = () => {\n      resetTaskForm();\n      createTaskDialogVisible.value = true;\n    };\n\n    // 重置任务表单\n    const resetTaskForm = () => {\n      Object.assign(taskForm, {\n        taskName: '',\n        taskType: '',\n        aiModel: '',\n        articleCategoryId: null,\n        crawlerRuleId: null,\n        searchKeywords: '',\n        hotspotSource: '',\n        prompt: ''\n      });\n      if (taskFormRef.value) {\n        taskFormRef.value.resetFields();\n      }\n    };\n\n    // 提交任务表单\n    const submitTaskForm = async () => {\n      if (!taskFormRef.value) return;\n      await taskFormRef.value.validate((valid, fields) => {\n        if (valid) {\n          // 模拟API请求\n          setTimeout(() => {\n            ElMessage.success('任务创建成功');\n            createTaskDialogVisible.value = false;\n            fetchTasks();\n          }, 500);\n        } else {\n          console.log('表单验证失败:', fields);\n        }\n      });\n    };\n\n    // 查看任务详情\n    const viewTaskDetail = id => {\n      taskDetailDialogVisible.value = true;\n      taskDetailLoading.value = true;\n\n      // 模拟API请求\n      setTimeout(() => {\n        const task = mockTasks.find(item => item.id === id);\n        if (task) {\n          Object.assign(taskDetail, task, {\n            sourceData: JSON.stringify([{\n              title: '示例标题1',\n              content: '示例内容1'\n            }, {\n              title: '示例标题2',\n              content: '示例内容2'\n            }], null, 2)\n          });\n        }\n        taskDetailLoading.value = false;\n      }, 500);\n    };\n\n    // 查看生成的文章\n    const viewGeneratedArticle = articleId => {\n      if (!articleId) {\n        ElMessage.warning('文章尚未生成');\n        return;\n      }\n      router.push(`/article/view/${articleId}`);\n    };\n\n    // 重试任务\n    const retryTask = id => {\n      // 模拟API请求\n      setTimeout(() => {\n        const index = tasks.value.findIndex(item => item.id === id);\n        if (index !== -1) {\n          tasks.value[index].status = 'PENDING';\n          tasks.value[index].errorMessage = null;\n          tasks.value[index].updatedTime = moment().format('YYYY-MM-DD HH:mm:ss');\n        }\n        if (taskDetailDialogVisible.value && taskDetail.id === id) {\n          taskDetail.status = 'PENDING';\n          taskDetail.errorMessage = null;\n          taskDetail.updatedTime = moment().format('YYYY-MM-DD HH:mm:ss');\n        }\n        ElMessage.success('任务已重新提交');\n      }, 500);\n    };\n\n    // 删除任务\n    const deleteTask = id => {\n      ElMessageBox.confirm('确定要删除该任务吗？', '删除确认', {\n        confirmButtonText: '确定',\n        cancelButtonText: '取消',\n        type: 'warning'\n      }).then(() => {\n        // 模拟API请求\n        setTimeout(() => {\n          tasks.value = tasks.value.filter(item => item.id !== id);\n          total.value = tasks.value.length;\n          ElMessage.success('删除成功');\n        }, 500);\n      }).catch(() => {});\n    };\n\n    // 获取任务类型文本\n    const getTaskTypeText = type => {\n      switch (type) {\n        case 'CRAWLER':\n          return '爬虫数据';\n        case 'SEARCH':\n          return '搜索关键词';\n        case 'HOTSPOT':\n          return '热点话题';\n        default:\n          return type;\n      }\n    };\n\n    // 获取AI模型文本\n    const getAIModelText = model => {\n      switch (model) {\n        case 'DEEPSEEK':\n          return 'DeepSeek';\n        case 'ALIYUN':\n          return '阿里云百炼';\n        default:\n          return model;\n      }\n    };\n\n    // 获取状态类型\n    const getStatusType = status => {\n      switch (status) {\n        case 'COMPLETED':\n          return 'success';\n        case 'PROCESSING':\n          return 'warning';\n        case 'PENDING':\n          return 'info';\n        case 'FAILED':\n          return 'danger';\n        default:\n          return 'info';\n      }\n    };\n\n    // 获取状态文本\n    const getStatusText = status => {\n      switch (status) {\n        case 'COMPLETED':\n          return '已完成';\n        case 'PROCESSING':\n          return '处理中';\n        case 'PENDING':\n          return '待处理';\n        case 'FAILED':\n          return '失败';\n        default:\n          return status;\n      }\n    };\n\n    // 格式化日期\n    const formatDate = dateString => {\n      if (!dateString) return '';\n      return moment(dateString).format('YYYY-MM-DD HH:mm:ss');\n    };\n\n    // 格式化源数据\n    const formatSourceData = sourceData => {\n      if (!sourceData) return '';\n      try {\n        const data = JSON.parse(sourceData);\n        return JSON.stringify(data, null, 2);\n      } catch (e) {\n        return sourceData;\n      }\n    };\n    onMounted(() => {\n      fetchTasks();\n    });\n    return {\n      loading,\n      tasks,\n      total,\n      currentPage,\n      pageSize,\n      searchKeyword,\n      taskType,\n      status,\n      createTaskDialogVisible,\n      taskFormRef,\n      taskForm,\n      taskRules,\n      taskDetailDialogVisible,\n      taskDetailLoading,\n      taskDetail,\n      handleSearch,\n      handleCurrentChange,\n      handleSizeChange,\n      showCreateTaskDialog,\n      submitTaskForm,\n      viewTaskDetail,\n      viewGeneratedArticle,\n      retryTask,\n      deleteTask,\n      getTaskTypeText,\n      getAIModelText,\n      getStatusType,\n      getStatusText,\n      formatDate,\n      formatSourceData\n    };\n  }\n};","map":{"version":3,"names":["ref","reactive","onMounted","useRouter","ElMessage","ElMessageBox","moment","name","setup","router","loading","tasks","total","currentPage","pageSize","searchKeyword","taskType","status","createTaskDialogVisible","taskFormRef","taskDetailDialogVisible","taskDetailLoading","taskDetail","taskForm","taskName","aiModel","articleCategoryId","crawlerRuleId","searchKeywords","hotspotSource","prompt","taskRules","required","message","trigger","mockTasks","id","resultArticleId","createdTime","updatedTime","errorMessage","fetchTasks","value","setTimeout","length","handleSearch","handleCurrentChange","page","handleSizeChange","size","showCreateTaskDialog","resetTaskForm","Object","assign","resetFields","submitTaskForm","validate","valid","fields","success","console","log","viewTaskDetail","task","find","item","sourceData","JSON","stringify","title","content","viewGeneratedArticle","articleId","warning","push","retryTask","index","findIndex","format","deleteTask","confirm","confirmButtonText","cancelButtonText","type","then","filter","catch","getTaskTypeText","getAIModelText","model","getStatusType","getStatusText","formatDate","dateString","formatSourceData","data","parse","e"],"sources":["/Users/ls/echo_pro/echo-blog-vue/src/views/admin/AITasks.vue"],"sourcesContent":["<template>\n  <div class=\"ai-tasks-container\">\n    <div class=\"page-header\">\n      <h2>AI生成任务</h2>\n      <el-button type=\"primary\" @click=\"showCreateTaskDialog\">\n        <el-icon><Plus /></el-icon> 创建任务\n      </el-button>\n    </div>\n    \n    <el-card class=\"filter-card\">\n      <div class=\"filter-container\">\n        <el-input\n          v-model=\"searchKeyword\"\n          placeholder=\"搜索任务名称\"\n          clearable\n          @keyup.enter=\"handleSearch\"\n          style=\"width: 200px; margin-right: 10px;\"\n        />\n        \n        <el-select\n          v-model=\"taskType\"\n          placeholder=\"任务类型\"\n          clearable\n          @change=\"handleSearch\"\n          style=\"width: 150px; margin-right: 10px;\"\n        >\n          <el-option label=\"爬虫数据\" value=\"CRAWLER\" />\n          <el-option label=\"搜索关键词\" value=\"SEARCH\" />\n          <el-option label=\"热点话题\" value=\"HOTSPOT\" />\n        </el-select>\n        \n        <el-select\n          v-model=\"status\"\n          placeholder=\"任务状态\"\n          clearable\n          @change=\"handleSearch\"\n          style=\"width: 120px; margin-right: 10px;\"\n        >\n          <el-option label=\"待处理\" value=\"PENDING\" />\n          <el-option label=\"处理中\" value=\"PROCESSING\" />\n          <el-option label=\"已完成\" value=\"COMPLETED\" />\n          <el-option label=\"失败\" value=\"FAILED\" />\n        </el-select>\n        \n        <el-button type=\"primary\" @click=\"handleSearch\">\n          <el-icon><Search /></el-icon> 搜索\n        </el-button>\n      </div>\n    </el-card>\n    \n    <el-table\n      v-loading=\"loading\"\n      :data=\"tasks\"\n      style=\"width: 100%; margin-top: 20px;\"\n      border\n    >\n      <el-table-column prop=\"taskName\" label=\"任务名称\" min-width=\"180\" />\n      \n      <el-table-column prop=\"taskType\" label=\"任务类型\" width=\"120\">\n        <template #default=\"scope\">\n          {{ getTaskTypeText(scope.row.taskType) }}\n        </template>\n      </el-table-column>\n      \n      <el-table-column prop=\"aiModel\" label=\"AI模型\" width=\"120\">\n        <template #default=\"scope\">\n          {{ getAIModelText(scope.row.aiModel) }}\n        </template>\n      </el-table-column>\n      \n      <el-table-column prop=\"status\" label=\"状态\" width=\"100\">\n        <template #default=\"scope\">\n          <el-tag :type=\"getStatusType(scope.row.status)\">\n            {{ getStatusText(scope.row.status) }}\n          </el-tag>\n        </template>\n      </el-table-column>\n      \n      <el-table-column prop=\"createdTime\" label=\"创建时间\" width=\"180\">\n        <template #default=\"scope\">\n          {{ formatDate(scope.row.createdTime) }}\n        </template>\n      </el-table-column>\n      \n      <el-table-column label=\"操作\" width=\"250\" fixed=\"right\">\n        <template #default=\"scope\">\n          <el-button\n            size=\"small\"\n            type=\"primary\"\n            @click=\"viewTaskDetail(scope.row.id)\"\n          >\n            详情\n          </el-button>\n          \n          <el-button\n            size=\"small\"\n            type=\"success\"\n            @click=\"viewGeneratedArticle(scope.row.resultArticleId)\"\n            v-if=\"scope.row.status === 'COMPLETED' && scope.row.resultArticleId\"\n          >\n            查看文章\n          </el-button>\n          \n          <el-button\n            size=\"small\"\n            type=\"warning\"\n            @click=\"retryTask(scope.row.id)\"\n            v-if=\"scope.row.status === 'FAILED'\"\n          >\n            重试\n          </el-button>\n          \n          <el-button\n            size=\"small\"\n            type=\"danger\"\n            @click=\"deleteTask(scope.row.id)\"\n          >\n            删除\n          </el-button>\n        </template>\n      </el-table-column>\n    </el-table>\n    \n    <div class=\"pagination-container\">\n      <el-pagination\n        background\n        layout=\"total, sizes, prev, pager, next, jumper\"\n        :total=\"total\"\n        :page-size=\"pageSize\"\n        :current-page=\"currentPage\"\n        :page-sizes=\"[10, 20, 50, 100]\"\n        @size-change=\"handleSizeChange\"\n        @current-change=\"handleCurrentChange\"\n      />\n    </div>\n    \n    <!-- 创建任务对话框 -->\n    <el-dialog\n      title=\"创建AI生成任务\"\n      v-model=\"createTaskDialogVisible\"\n      width=\"800px\"\n    >\n      <el-form :model=\"taskForm\" :rules=\"taskRules\" ref=\"taskFormRef\" label-width=\"120px\">\n        <el-form-item label=\"任务名称\" prop=\"taskName\">\n          <el-input v-model=\"taskForm.taskName\" placeholder=\"请输入任务名称\"></el-input>\n        </el-form-item>\n        \n        <el-form-item label=\"任务类型\" prop=\"taskType\">\n          <el-select v-model=\"taskForm.taskType\" placeholder=\"请选择任务类型\" style=\"width: 100%;\">\n            <el-option label=\"爬虫数据\" value=\"CRAWLER\" />\n            <el-option label=\"搜索关键词\" value=\"SEARCH\" />\n            <el-option label=\"热点话题\" value=\"HOTSPOT\" />\n          </el-select>\n        </el-form-item>\n        \n        <el-form-item label=\"AI模型\" prop=\"aiModel\">\n          <el-select v-model=\"taskForm.aiModel\" placeholder=\"请选择AI模型\" style=\"width: 100%;\">\n            <el-option label=\"DeepSeek\" value=\"DEEPSEEK\" />\n            <el-option label=\"阿里云百炼\" value=\"ALIYUN\" />\n          </el-select>\n        </el-form-item>\n        \n        <el-form-item label=\"文章分类\" prop=\"articleCategoryId\">\n          <el-select v-model=\"taskForm.articleCategoryId\" placeholder=\"请选择文章分类\" style=\"width: 100%;\">\n            <el-option label=\"技术\" :value=\"1\" />\n            <el-option label=\"生活\" :value=\"2\" />\n            <el-option label=\"旅游\" :value=\"3\" />\n          </el-select>\n        </el-form-item>\n        \n        <el-form-item \n          label=\"爬虫规则\" \n          prop=\"crawlerRuleId\" \n          v-if=\"taskForm.taskType === 'CRAWLER'\"\n        >\n          <el-select v-model=\"taskForm.crawlerRuleId\" placeholder=\"请选择爬虫规则\" style=\"width: 100%;\">\n            <el-option label=\"知乎热门\" :value=\"1\" />\n            <el-option label=\"掘金文章\" :value=\"2\" />\n            <el-option label=\"CSDN博客\" :value=\"3\" />\n          </el-select>\n        </el-form-item>\n        \n        <el-form-item \n          label=\"搜索关键词\" \n          prop=\"searchKeywords\" \n          v-if=\"taskForm.taskType === 'SEARCH'\"\n        >\n          <el-input v-model=\"taskForm.searchKeywords\" placeholder=\"请输入搜索关键词\"></el-input>\n        </el-form-item>\n        \n        <el-form-item \n          label=\"热点来源\" \n          prop=\"hotspotSource\" \n          v-if=\"taskForm.taskType === 'HOTSPOT'\"\n        >\n          <el-select v-model=\"taskForm.hotspotSource\" placeholder=\"请选择热点来源\" style=\"width: 100%;\">\n            <el-option label=\"百度\" value=\"baidu\" />\n            <el-option label=\"微博\" value=\"weibo\" />\n            <el-option label=\"知乎\" value=\"zhihu\" />\n            <el-option label=\"今日头条\" value=\"toutiao\" />\n          </el-select>\n        </el-form-item>\n        \n        <el-form-item label=\"提示词\">\n          <el-input\n            v-model=\"taskForm.prompt\"\n            type=\"textarea\"\n            :rows=\"4\"\n            placeholder=\"请输入提示词，用于指导AI生成内容\"\n          ></el-input>\n        </el-form-item>\n      </el-form>\n      \n      <template #footer>\n        <span class=\"dialog-footer\">\n          <el-button @click=\"createTaskDialogVisible = false\">取消</el-button>\n          <el-button type=\"primary\" @click=\"submitTaskForm\">创建</el-button>\n        </span>\n      </template>\n    </el-dialog>\n    \n    <!-- 任务详情对话框 -->\n    <el-dialog\n      title=\"任务详情\"\n      v-model=\"taskDetailDialogVisible\"\n      width=\"800px\"\n    >\n      <div v-loading=\"taskDetailLoading\">\n        <el-descriptions :column=\"1\" border>\n          <el-descriptions-item label=\"任务名称\">{{ taskDetail.taskName }}</el-descriptions-item>\n          <el-descriptions-item label=\"任务类型\">{{ getTaskTypeText(taskDetail.taskType) }}</el-descriptions-item>\n          <el-descriptions-item label=\"AI模型\">{{ getAIModelText(taskDetail.aiModel) }}</el-descriptions-item>\n          <el-descriptions-item label=\"状态\">\n            <el-tag :type=\"getStatusType(taskDetail.status)\">{{ getStatusText(taskDetail.status) }}</el-tag>\n          </el-descriptions-item>\n          <el-descriptions-item label=\"创建时间\">{{ formatDate(taskDetail.createdTime) }}</el-descriptions-item>\n          <el-descriptions-item label=\"更新时间\">{{ formatDate(taskDetail.updatedTime) }}</el-descriptions-item>\n          <el-descriptions-item label=\"提示词\">{{ taskDetail.prompt }}</el-descriptions-item>\n          <el-descriptions-item label=\"源数据\">\n            <pre class=\"source-data\">{{ formatSourceData(taskDetail.sourceData) }}</pre>\n          </el-descriptions-item>\n          <el-descriptions-item v-if=\"taskDetail.errorMessage\" label=\"错误信息\">\n            <div class=\"error-message\">{{ taskDetail.errorMessage }}</div>\n          </el-descriptions-item>\n        </el-descriptions>\n        \n        <div class=\"task-actions\" v-if=\"taskDetail.id\">\n          <el-button\n            type=\"success\"\n            @click=\"viewGeneratedArticle(taskDetail.resultArticleId)\"\n            v-if=\"taskDetail.status === 'COMPLETED' && taskDetail.resultArticleId\"\n          >\n            查看生成的文章\n          </el-button>\n          \n          <el-button\n            type=\"warning\"\n            @click=\"retryTask(taskDetail.id)\"\n            v-if=\"taskDetail.status === 'FAILED'\"\n          >\n            重试任务\n          </el-button>\n        </div>\n      </div>\n    </el-dialog>\n  </div>\n</template>\n\n<script>\nimport { ref, reactive, onMounted } from 'vue'\nimport { useRouter } from 'vue-router'\nimport { ElMessage, ElMessageBox } from 'element-plus'\nimport moment from 'moment'\n\nexport default {\n  name: 'AITasks',\n  setup() {\n    const router = useRouter()\n    const loading = ref(false)\n    const tasks = ref([])\n    const total = ref(0)\n    const currentPage = ref(1)\n    const pageSize = ref(10)\n    const searchKeyword = ref('')\n    const taskType = ref('')\n    const status = ref('')\n    \n    const createTaskDialogVisible = ref(false)\n    const taskFormRef = ref(null)\n    \n    const taskDetailDialogVisible = ref(false)\n    const taskDetailLoading = ref(false)\n    const taskDetail = reactive({})\n    \n    const taskForm = reactive({\n      taskName: '',\n      taskType: '',\n      aiModel: '',\n      articleCategoryId: null,\n      crawlerRuleId: null,\n      searchKeywords: '',\n      hotspotSource: '',\n      prompt: ''\n    })\n    \n    const taskRules = {\n      taskName: [\n        { required: true, message: '请输入任务名称', trigger: 'blur' }\n      ],\n      taskType: [\n        { required: true, message: '请选择任务类型', trigger: 'change' }\n      ],\n      aiModel: [\n        { required: true, message: '请选择AI模型', trigger: 'change' }\n      ],\n      articleCategoryId: [\n        { required: true, message: '请选择文章分类', trigger: 'change' }\n      ],\n      crawlerRuleId: [\n        { required: true, message: '请选择爬虫规则', trigger: 'change' }\n      ],\n      searchKeywords: [\n        { required: true, message: '请输入搜索关键词', trigger: 'blur' }\n      ],\n      hotspotSource: [\n        { required: true, message: '请选择热点来源', trigger: 'change' }\n      ]\n    }\n    \n    // 模拟数据\n    const mockTasks = [\n      {\n        id: 1,\n        taskName: '知乎热门文章生成',\n        taskType: 'CRAWLER',\n        aiModel: 'DEEPSEEK',\n        status: 'COMPLETED',\n        resultArticleId: 101,\n        createdTime: '2023-01-01 12:00:00',\n        updatedTime: '2023-01-01 12:05:00'\n      },\n      {\n        id: 2,\n        taskName: '搜索AI相关内容',\n        taskType: 'SEARCH',\n        aiModel: 'ALIYUN',\n        status: 'PROCESSING',\n        resultArticleId: null,\n        createdTime: '2023-01-02 12:00:00',\n        updatedTime: '2023-01-02 12:01:00'\n      },\n      {\n        id: 3,\n        taskName: '百度热搜话题分析',\n        taskType: 'HOTSPOT',\n        aiModel: 'DEEPSEEK',\n        status: 'FAILED',\n        resultArticleId: null,\n        createdTime: '2023-01-03 12:00:00',\n        updatedTime: '2023-01-03 12:02:00',\n        errorMessage: 'AI模型调用失败，请稍后重试'\n      }\n    ]\n    \n    // 获取任务列表\n    const fetchTasks = () => {\n      loading.value = true\n      \n      // 模拟API请求\n      setTimeout(() => {\n        tasks.value = mockTasks\n        total.value = mockTasks.length\n        loading.value = false\n      }, 500)\n    }\n    \n    // 搜索\n    const handleSearch = () => {\n      currentPage.value = 1\n      fetchTasks()\n    }\n    \n    // 页码变化\n    const handleCurrentChange = (page) => {\n      currentPage.value = page\n      fetchTasks()\n    }\n    \n    // 每页条数变化\n    const handleSizeChange = (size) => {\n      pageSize.value = size\n      currentPage.value = 1\n      fetchTasks()\n    }\n    \n    // 显示创建任务对话框\n    const showCreateTaskDialog = () => {\n      resetTaskForm()\n      createTaskDialogVisible.value = true\n    }\n    \n    // 重置任务表单\n    const resetTaskForm = () => {\n      Object.assign(taskForm, {\n        taskName: '',\n        taskType: '',\n        aiModel: '',\n        articleCategoryId: null,\n        crawlerRuleId: null,\n        searchKeywords: '',\n        hotspotSource: '',\n        prompt: ''\n      })\n      if (taskFormRef.value) {\n        taskFormRef.value.resetFields()\n      }\n    }\n    \n    // 提交任务表单\n    const submitTaskForm = async () => {\n      if (!taskFormRef.value) return\n      \n      await taskFormRef.value.validate((valid, fields) => {\n        if (valid) {\n          // 模拟API请求\n          setTimeout(() => {\n            ElMessage.success('任务创建成功')\n            createTaskDialogVisible.value = false\n            fetchTasks()\n          }, 500)\n        } else {\n          console.log('表单验证失败:', fields)\n        }\n      })\n    }\n    \n    // 查看任务详情\n    const viewTaskDetail = (id) => {\n      taskDetailDialogVisible.value = true\n      taskDetailLoading.value = true\n      \n      // 模拟API请求\n      setTimeout(() => {\n        const task = mockTasks.find(item => item.id === id)\n        if (task) {\n          Object.assign(taskDetail, task, {\n            sourceData: JSON.stringify([\n              {\n                title: '示例标题1',\n                content: '示例内容1'\n              },\n              {\n                title: '示例标题2',\n                content: '示例内容2'\n              }\n            ], null, 2)\n          })\n        }\n        taskDetailLoading.value = false\n      }, 500)\n    }\n    \n    // 查看生成的文章\n    const viewGeneratedArticle = (articleId) => {\n      if (!articleId) {\n        ElMessage.warning('文章尚未生成')\n        return\n      }\n      \n      router.push(`/article/view/${articleId}`)\n    }\n    \n    // 重试任务\n    const retryTask = (id) => {\n      // 模拟API请求\n      setTimeout(() => {\n        const index = tasks.value.findIndex(item => item.id === id)\n        if (index !== -1) {\n          tasks.value[index].status = 'PENDING'\n          tasks.value[index].errorMessage = null\n          tasks.value[index].updatedTime = moment().format('YYYY-MM-DD HH:mm:ss')\n        }\n        \n        if (taskDetailDialogVisible.value && taskDetail.id === id) {\n          taskDetail.status = 'PENDING'\n          taskDetail.errorMessage = null\n          taskDetail.updatedTime = moment().format('YYYY-MM-DD HH:mm:ss')\n        }\n        \n        ElMessage.success('任务已重新提交')\n      }, 500)\n    }\n    \n    // 删除任务\n    const deleteTask = (id) => {\n      ElMessageBox.confirm('确定要删除该任务吗？', '删除确认', {\n        confirmButtonText: '确定',\n        cancelButtonText: '取消',\n        type: 'warning'\n      }).then(() => {\n        // 模拟API请求\n        setTimeout(() => {\n          tasks.value = tasks.value.filter(item => item.id !== id)\n          total.value = tasks.value.length\n          ElMessage.success('删除成功')\n        }, 500)\n      }).catch(() => {})\n    }\n    \n    // 获取任务类型文本\n    const getTaskTypeText = (type) => {\n      switch (type) {\n        case 'CRAWLER':\n          return '爬虫数据'\n        case 'SEARCH':\n          return '搜索关键词'\n        case 'HOTSPOT':\n          return '热点话题'\n        default:\n          return type\n      }\n    }\n    \n    // 获取AI模型文本\n    const getAIModelText = (model) => {\n      switch (model) {\n        case 'DEEPSEEK':\n          return 'DeepSeek'\n        case 'ALIYUN':\n          return '阿里云百炼'\n        default:\n          return model\n      }\n    }\n    \n    // 获取状态类型\n    const getStatusType = (status) => {\n      switch (status) {\n        case 'COMPLETED':\n          return 'success'\n        case 'PROCESSING':\n          return 'warning'\n        case 'PENDING':\n          return 'info'\n        case 'FAILED':\n          return 'danger'\n        default:\n          return 'info'\n      }\n    }\n    \n    // 获取状态文本\n    const getStatusText = (status) => {\n      switch (status) {\n        case 'COMPLETED':\n          return '已完成'\n        case 'PROCESSING':\n          return '处理中'\n        case 'PENDING':\n          return '待处理'\n        case 'FAILED':\n          return '失败'\n        default:\n          return status\n      }\n    }\n    \n    // 格式化日期\n    const formatDate = (dateString) => {\n      if (!dateString) return ''\n      return moment(dateString).format('YYYY-MM-DD HH:mm:ss')\n    }\n    \n    // 格式化源数据\n    const formatSourceData = (sourceData) => {\n      if (!sourceData) return ''\n      \n      try {\n        const data = JSON.parse(sourceData)\n        return JSON.stringify(data, null, 2)\n      } catch (e) {\n        return sourceData\n      }\n    }\n    \n    onMounted(() => {\n      fetchTasks()\n    })\n    \n    return {\n      loading,\n      tasks,\n      total,\n      currentPage,\n      pageSize,\n      searchKeyword,\n      taskType,\n      status,\n      createTaskDialogVisible,\n      taskFormRef,\n      taskForm,\n      taskRules,\n      taskDetailDialogVisible,\n      taskDetailLoading,\n      taskDetail,\n      handleSearch,\n      handleCurrentChange,\n      handleSizeChange,\n      showCreateTaskDialog,\n      submitTaskForm,\n      viewTaskDetail,\n      viewGeneratedArticle,\n      retryTask,\n      deleteTask,\n      getTaskTypeText,\n      getAIModelText,\n      getStatusType,\n      getStatusText,\n      formatDate,\n      formatSourceData\n    }\n  }\n}\n</script>\n\n<style scoped>\n.ai-tasks-container {\n  padding: 20px;\n}\n\n.page-header {\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n  margin-bottom: 20px;\n}\n\n.filter-card {\n  margin-bottom: 20px;\n}\n\n.filter-container {\n  display: flex;\n  align-items: center;\n  flex-wrap: wrap;\n}\n\n.pagination-container {\n  margin-top: 20px;\n  display: flex;\n  justify-content: center;\n}\n\n.source-data {\n  max-height: 300px;\n  overflow-y: auto;\n  background-color: #f5f7fa;\n  padding: 10px;\n  border-radius: 4px;\n  font-family: monospace;\n  white-space: pre-wrap;\n  word-break: break-all;\n}\n\n.error-message {\n  color: #f56c6c;\n  white-space: pre-wrap;\n  word-break: break-all;\n}\n\n.task-actions {\n  margin-top: 20px;\n  display: flex;\n  justify-content: center;\n  gap: 10px;\n}\n</style> "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}